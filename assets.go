package assets

import (
	"bytes"
	"errors"
	"io/ioutil"
	"os"
	"path/filepath"
	"regexp"

	"github.com/go-playground/bundler"
)

const (
	oldNewSeparator = " --> "
	manifestFile    = "/manifest.txt"
)

// Assets is the instance object for assets
type Assets struct {
	LeftDelim  string
	RightDelim string
}

// New initializes a new Assets instanc
func New(leftDelim string, rightDelim string) *Assets {
	return &Assets{
		LeftDelim:  leftDelim,
		RightDelim: rightDelim,
	}
}

// Generate processes (bundles, compresses...) the assets for use and creates the Manifest file
// NOTE: no compression yet until there is a native and establishes compressor written in Go
func (a *Assets) Generate(dirname string, ignoreRegexp *regexp.Regexp) ([]*bundler.ProcessedFile, string, error) {

	dirname = filepath.Clean(dirname)

	// verify dirname is actually a DIR + do symlink check
	fi, err := os.Lstat(dirname)
	if err != nil {
		return nil, "", err
	}

	if !fi.IsDir() {

		// check if symlink
		if fi.Mode()&os.ModeSymlink == os.ModeSymlink {

			link, err := filepath.EvalSymlinks(dirname)
			if err != nil {
				return nil, "", errors.New("Error Resolving Symlink:" + err.Error())
			}

			fi, err = os.Stat(link)
			if err != nil {
				return nil, "", err
			}

			if !fi.IsDir() {
				return nil, "", errors.New("dirname passed in is not a directory")
			}

			dirname = link

		} else {
			return nil, "", errors.New("dirname passed in is not a directory")
		}
	}

	processed, err := bundler.BundleDir(dirname, "", a.LeftDelim, a.RightDelim, ignoreRegexp)
	if err != nil {
		return nil, "", err
	}

	var buff bytes.Buffer

	for _, file := range processed {
		buff.WriteString(file.OriginalFilename)
		buff.WriteString(oldNewSeparator)
		buff.WriteString(file.NewFilename)
		buff.WriteString("\n")
	}

	manifest := dirname + manifestFile

	if err = ioutil.WriteFile(manifest, buff.Bytes(), 0644); err != nil {
		return nil, "", err
	}

	return processed, manifest, nil
}

// LoadManifestFiles reads the manifest file generated by the Generate() command
func (a *Assets) LoadManifestFiles() {

}
